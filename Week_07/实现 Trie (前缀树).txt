public class Trie {

 Trie[] nexts;
    bool isEnd;
    /** Initialize your data structure here. */
    public Trie() {
        nexts = new Trie[26];
        isEnd = false;
    }
    
    /** Inserts a word into the trie. */
    public void Insert(string word) {
         Trie node = this;

        for (int i = 0; i < word.Length; i++)
        {
            int index = word[i] - 'a';

            if (node.nexts[index] == null)
            {
                node.nexts[index] = new Trie();
            }

            node = node.nexts[index];
        }
        node.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public bool Search(string word) {
        Trie node = this;

        for (int i = 0; i < word.Length; i++)
        {
            int index = word[i] - 'a';

            if (node.nexts[index] == null)
            {
                return false;
            }

            node = node.nexts[index];
        }

        return node.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public bool StartsWith(string prefix) {
         if (prefix.Length == 0)
        {
            return false;
        }
        Trie node = this;

        for (int i = 0; i < prefix.Length; i++)
        {
            int index = prefix[i] - 'a';

            if (node.nexts[index] == null)
            {
                return false;
            }

            node = node.nexts[index];
        }

        return true;
    }
}